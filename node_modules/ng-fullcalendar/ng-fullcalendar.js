import { Component, ElementRef, EventEmitter, Input, NgModule, Output } from '@angular/core';
import $ from 'jquery/index';
import 'fullcalendar/index';

class CalendarComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.eventDrop = new EventEmitter();
        this.eventResize = new EventEmitter();
        this.eventClick = new EventEmitter();
        this.clickButton = new EventEmitter();
        this.windowResize = new EventEmitter();
        this.viewRender = new EventEmitter();
        this.viewDestroy = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            this.updaterOptions();
            $('ng-fullcalendar').fullCalendar(this.options);
            // Click listeners
            let /** @type {?} */ elem = document.getElementsByTagName('ng-fullcalendar');
            $('[class ^="fc"][class *="button"]').click(el => {
                let /** @type {?} */ classnames = el.currentTarget.className.split(' ');
                classnames.forEach(name => {
                    if (name.indexOf('button') == name.length - 6) {
                        name = name.replace(/fc|button|-/g, '');
                        if (name != '') {
                            eventDispatch(name);
                        }
                    }
                });
            });
            /**
             * @param {?} buttonType
             * @return {?}
             */
            function eventDispatch(buttonType) {
                let /** @type {?} */ data = $('ng-fullcalendar').fullCalendar('getDate');
                let /** @type {?} */ currentDetail = {
                    buttonType: buttonType,
                    data: data
                };
                var /** @type {?} */ widgetEvent = new CustomEvent('clickButton', {
                    bubbles: true,
                    detail: currentDetail
                });
                elem[0].dispatchEvent(widgetEvent);
            }
        }, 100);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @return {?}
     */
    updaterOptions() {
        let /** @type {?} */ elem = document.getElementsByTagName('ng-fullcalendar');
        this.options.eventDrop = function (event, duration) {
            let /** @type {?} */ detail = { event: event, duration: duration };
            var /** @type {?} */ widgetEvent = new CustomEvent('eventDrop', {
                bubbles: true,
                detail: detail
            });
            elem[0].dispatchEvent(widgetEvent);
        };
        this.options.eventResize = function (event, duration) {
            let /** @type {?} */ detail = { event: event, duration: duration };
            var /** @type {?} */ widgetEvent = new CustomEvent('eventResize', {
                bubbles: true,
                detail: detail
            });
            elem[0].dispatchEvent(widgetEvent);
        };
        this.options.eventClick = function (event) {
            let /** @type {?} */ detail = { event: event, duration: null };
            var /** @type {?} */ widgetEvent = new CustomEvent('eventClick', {
                bubbles: true,
                detail: detail
            });
            elem[0].dispatchEvent(widgetEvent);
        };
        this.options.windowResize = function (view) {
            let /** @type {?} */ detail = { view: view };
            var /** @type {?} */ widgetEvent = new CustomEvent('windowResize', {
                bubbles: true,
                detail: detail
            });
            elem[0].dispatchEvent(widgetEvent);
        };
        this.options.viewRender = function (view, element) {
            let /** @type {?} */ detail = { view: view, element: element };
            var /** @type {?} */ widgetEvent = new CustomEvent('viewRender', {
                bubbles: true,
                detail: detail
            });
            elem[0].dispatchEvent(widgetEvent);
        };
        this.options.viewDestroy = function (view, element) {
            let /** @type {?} */ detail = { view: view, element: element };
            var /** @type {?} */ widgetEvent = new CustomEvent('viewDestroy', {
                bubbles: true,
                detail: detail
            });
            elem[0].dispatchEvent(widgetEvent);
        };
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    fullCalendar(...args) {
        if (!args) {
            return;
        }
        switch (args.length) {
            case 0:
                return;
            case 1:
                return $(this.element.nativeElement).fullCalendar(args[0]);
            case 2:
                return $(this.element.nativeElement).fullCalendar(args[0], args[1]);
            case 3:
                return $(this.element.nativeElement).fullCalendar(args[0], args[1], args[2]);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateEvent(event) {
        return $(this.element.nativeElement).fullCalendar('updateEvent', event);
    }
    /**
     * @param {?} idOrFilter
     * @return {?}
     */
    clientEvents(idOrFilter) {
        return $(this.element.nativeElement).fullCalendar('clientEvents', idOrFilter);
    }
}
CalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-fullcalendar',
                template: '<div id="calendar"></div>',
            },] },
];
/**
 * @nocollapse
 */
CalendarComponent.ctorParameters = () => [
    { type: ElementRef, },
];
CalendarComponent.propDecorators = {
    'options': [{ type: Input },],
    'eventDrop': [{ type: Output },],
    'eventResize': [{ type: Output },],
    'eventClick': [{ type: Output },],
    'clickButton': [{ type: Output },],
    'windowResize': [{ type: Output },],
    'viewRender': [{ type: Output },],
    'viewDestroy': [{ type: Output },],
};

class FullCalendarModule {
}
FullCalendarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CalendarComponent],
                exports: [CalendarComponent],
            },] },
];
/**
 * @nocollapse
 */
FullCalendarModule.ctorParameters = () => [];

class ButtonClickModel {
}

class UpdateEventModel {
}

/**
 * Generated bundle index. Do not edit.
 */

export { FullCalendarModule, CalendarComponent, ButtonClickModel, UpdateEventModel };
//# sourceMappingURL=ng-fullcalendar.js.map
